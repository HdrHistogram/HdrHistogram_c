INCLUDE(CheckLibraryExists)

option(HDR_HISTOGRAM_BUILD_BENCHMARK "Build benchmark" ON)

if (HDR_HISTOGRAM_BUILD_BENCHMARK)
    if (UNIX)
        set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL "Suppressing benchmark's tests" FORCE)
        add_subdirectory(vendor/google/benchmark)
        add_executable(hdr_histogram_benchmark hdr_histogram_benchmark.cpp)
        target_link_libraries(hdr_histogram_benchmark benchmark)
        target_link_libraries(hdr_histogram_benchmark hdr_histogram_static m z)
    else()
        message(WARNING
              "google.benchmark - microbenchmarks disabled on WIN32 platforms")
    endif()
endif()

add_executable(hdr_histogram_test hdr_histogram_test.c minunit.c)
add_executable(hdr_histogram_atomic_test hdr_histogram_atomic_test.c minunit.c)
add_executable(hdr_histogram_log_test hdr_histogram_log_test.c minunit.c)
add_executable(hdr_atomic_test hdr_atomic_test.c minunit.c hdr_test_util.h)

add_executable(perftest hdr_histogram_perf.c)

if (WIN32)
    add_library(z STATIC IMPORTED)
    set_property(TARGET z PROPERTY IMPORTED_LOCATION ${ZLIB_LIBRARIES})

    target_link_libraries(hdr_histogram_test hdr_histogram_static ws2_32)
    target_link_libraries(hdr_histogram_atomic_test hdr_histogram_static ws2_32)
    target_link_libraries(hdr_histogram_log_test hdr_histogram_static z ws2_32)
    target_link_libraries(perftest hdr_histogram_static z ws2_32)
    target_link_libraries(hdr_atomic_test z ws2_32)
else()
    target_link_libraries(hdr_histogram_test hdr_histogram_static m)
    target_link_libraries(hdr_histogram_atomic_test hdr_histogram_static m)
    target_link_libraries(hdr_histogram_log_test hdr_histogram_static m z)
    target_link_libraries(perftest hdr_histogram_static m z)
    target_link_libraries(hdr_atomic_test z)
endif()

CHECK_LIBRARY_EXISTS(rt clock_gettime "" RT_EXISTS)
if (RT_EXISTS)
    target_link_libraries(hdr_histogram_log_test rt)
    target_link_libraries(perftest rt)
endif (RT_EXISTS)

install(TARGETS hdr_histogram_test DESTINATION bin)
install(TARGETS hdr_histogram_atomic_test DESTINATION bin)
install(TARGETS hdr_histogram_log_test DESTINATION bin)
install(TARGETS perftest DESTINATION bin)

add_test(Histogram hdr_histogram_test)
add_test(HistogramAtomic hdr_histogram_atomic_test)
add_test(HistogramLogging hdr_histogram_log_test)
add_test(Atomic hdr_atomic_test)

if (UNIX)
    add_executable(hdr_histogram_atomic_concurrency_test hdr_histogram_atomic_concurrency_test.c minunit.c)
    target_link_libraries(hdr_histogram_atomic_concurrency_test hdr_histogram_static m pthread)
    add_test(HistogramAtomicConcurrency hdr_histogram_atomic_concurrency_test)
endif()

configure_file(jHiccup-2.0.1.logV0.hlog jHiccup-2.0.1.logV0.hlog COPYONLY)
configure_file(jHiccup-2.0.6.logV1.hlog jHiccup-2.0.6.logV1.hlog COPYONLY)
configure_file(jHiccup-2.0.7S.logV2.hlog jHiccup-2.0.7S.logV2.hlog COPYONLY)
configure_file(jHiccup-2.0.7S.logV3.hlog jHiccup-2.0.7S.logV3.hlog COPYONLY)
